@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600,700');

//••••••••••••••••••••••••••••••••••••••••
//
// - VARIABLES
//
//••••••••••••••••••••••••••••••••••••••••

$colors: (
    midnight_blue: #2c3e50,
    pomegranate: #c0392b,
    clouds: #ecf0f1,
    concrete: #95a5a6,
    pumpkin: #d35400
);

//••••••••••••••••••••••••••••••••••••••••
//
// - RESPONSIVE HELPER
//
//••••••••••••••••••••••••••••••••••••••••

@mixin MQ($bp) {
    @if $bp == LG {
        @media (max-width: 1199px) { @content; }
    }
    @else if $bp == MD {
        @media (max-width: 991px) { @content; }
    }
    @else if $bp == SM {
        @media (max-width: 767px) { @content; }
    }
    @else if $bp == XS {
        @media (max-width: 479px) { @content; }
    }
}


//••••••••••••••••••••••••••••••••••••••••
//
// - RESPONSIVE TYPOGRAPHY
//
//••••••••••••••••••••••••••••••••••••••••

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == null {
            @include make-font-size($fs-font-size);
        }
        @else {
            // If $fs-font-size is a key that exists in
            // $fs-breakpoints, use the value
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }
            @media screen and (max-width: $fs-breakpoint) {
                @include make-font-size($fs-font-size);
            }
        }
    }
}

@mixin make-font-size($fs-font-size) {
    // If $fs-font-size is a list, include
    // both font-size and line-height
    @if type-of($fs-font-size) == "list" {
       font-size: nth($fs-font-size, 1);
        @if (length($fs-font-size) > 1) {
            line-height: nth($fs-font-size, 2);
        }
    }
    @else {
        font-size: $fs-font-size;
    }
}

$breakpoints: (
    lg : 1199px,
    md : 991px,
    sm : 767px,
    xs : 479px,
);


$body-text: (
    null    : (16px, 1.4),
    md      : (16px, 1.4),
    sm      : (15px, 1.4),
    xs      : (15px, 1.4),
);

//••••••••••••••••••••••••••••••••••••••••
//
// - ROW NO GUTTER
//
//••••••••••••••••••••••••••••••••••••••••

.row.no--gutter {
    & > [class^="col-"],
    & > [class*=" col-"] {
        @include MQ(MD) {
            padding-right: 0;
            padding-left: 0;
        }
    }
}


//••••••••••••••••••••••••••••••••••••••••
//
// - GENERAL
//
//••••••••••••••••••••••••••••••••••••••••

* {
    -webkit-font-smoothing: antialiased;
}

body {
    font-family: 'Open Sans', sans-serif;
    background: white;
    font-size: 16px;
}

a {
    color: #404040;
}
a:hover {
    color: rgba(255,255,255, 0.6);
}
a, a:hover, a:active, a:focus {
    text-decoration: none;
}
input, textarea, select, button {
    box-sizing: border-box;

    &:focus {
        outline: none;
    }
}

a, input {
    transition: all 0.3s ease;
}

h1, h2, h3, h4, h5, h6 {
    margin: 0 0 0;
}

img {
    max-width: 100%;
    height: auto;
}

ul, ol {
    margin: 0; padding: 0; list-style-type: none;
}

li + li {
    padding-top: 10px;
}

p {
    margin: 0 0 0;
}

.text--size__normal {
    @include font-size($body-text);
    font-weight: normal;
}

.text--size__small {
    font-size: 50%;
}

.navbar {
    margin-bottom: 0;
}
//••••••••••••••••••••••••••••••••••••••••
//
// - VERTICAL GAP
//
//••••••••••••••••••••••••••••••••••••••••

@mixin verticalGap {
    padding: 35px 0 40px;
    @include MQ(SM) {
        padding: 20px 0;
    }
}

//••••••••••••••••••••••••••••••••••••••••
//
// - COLOR MAPPING
//
//••••••••••••••••••••••••••••••••••••••••

@each $name, $value in $colors {
    .color--#{$name} {
        background: $value;
    }
}

@function color($key) {
    @if map-has-key($colors, $key) {
        @return map-get($colors, $key);
    }

    @warn "Unknown `#{$key}` in variable $colors.";
    @return null;
}

